// widgets/side_menu.dart
import 'package:flutter/material.dart';
import '../models/tab_item.dart';
import '../theme/app_colors.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:ui';
import 'package:smooth_corner/smooth_corner.dart';
import 'package:flutter_svg/flutter_svg.dart';

class DragToOpenWrapper extends StatelessWidget {
  final Widget child;
  final VoidCallback onOpenMenu;
  final double dragWidth;

  const DragToOpenWrapper({
    super.key,
    required this.child,
    required this.onOpenMenu,
    this.dragWidth = 60,
  });

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        child,
        Positioned(
          left: 0,
          top: 0,
          bottom: 0,
          width: dragWidth,
          child: GestureDetector(
            onHorizontalDragStart: (details) {
              if (details.localPosition.dx <= dragWidth) {
                onOpenMenu();
              }
            },
            behavior: HitTestBehavior.translucent,
            child: Container(),
          ),
        ),
      ],
    );
  }
}

class SideMenu extends StatefulWidget {
  final List<TabItem> tabs;
  final int selectedIndex;
  final Function(int) onTabSelected;

  const SideMenu({
    super.key,
    required this.tabs,
    required this.selectedIndex,
    required this.onTabSelected,
  });

  @override
  State<SideMenu> createState() => _SideMenuState();
}

class _SideMenuState extends State<SideMenu> {
  bool _isCreateTabFocused = false;

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        // –ü—Ä–æ—Å—Ç–æ —Ñ–æ–Ω –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è
        Container(
          color: const Color(0xFFE2E2E2),
        ),
        // –°–∞–º–æ –º–µ–Ω—é
        Drawer(
          width: MediaQuery.of(context).size.width,
          backgroundColor: Colors.transparent,
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.zero,
          ),
          child: SafeArea(
            bottom: false,
            child: SingleChildScrollView(
              reverse: true,
              child: Padding(
                padding: EdgeInsets.only(
                  bottom: MediaQuery.of(context).viewInsets.bottom + 12,
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    ListView.builder(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      reverse: true,
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 24,
                      ),
                      itemCount: widget.tabs.length + 1,
                      itemBuilder: (context, index) {
                        return Center(
                          child: SizedBox(
                            width: MediaQuery.of(context).size.width * 0.85,
                            child: SideMenuTab(
                              emoji: index == 0
                                  ? null
                                  : widget.tabs[index - 1].emoji,
                              title: index == 0
                                  ? null
                                  : widget.tabs[index - 1].title,
                              isSelected: index == 0
                                  ? _isCreateTabFocused
                                  : !_isCreateTabFocused &&
                                      widget.selectedIndex == index - 1,
                              onTap: index == 0
                                  ? null
                                  : () {
                                      print(
                                          'üîµ SideMenu: onTap for index ${index - 1}');
                                      widget.onTabSelected(index - 1);
                                      Future.delayed(Duration.zero, () {
                                        print(
                                            'üîµ SideMenu: calling Navigator.pop');
                                        Navigator.pop(context);
                                      });
                                    },
                              onCreateTab: index == 0
                                  ? (String title) {
                                      Navigator.pop(context);
                                    }
                                  : null,
                              onFocusChange: index == 0
                                  ? (focused) {
                                      setState(() {
                                        _isCreateTabFocused = focused;
                                      });
                                    }
                                  : null,
                              isCreateTab: index == 0,
                              index: index,
                              tabsCount: widget.tabs.length + 1,
                            ),
                          ),
                        );
                      },
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ],
    );
  }
}

class SideMenuTab extends StatefulWidget {
  final String? emoji; // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
  final String? title; // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
  final bool isSelected;
  final VoidCallback? onTap; // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞–±–∞
  final Function(bool)? onFocusChange; // –î–ª—è —Ç–∞–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è
  final bool isCreateTab; // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ —Ç–∞–± —Å–æ–∑–¥–∞–Ω–∏—è
  final int index;
  final int tabsCount;
  final Function(String)? onCreateTab; // –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞–±–∞

  const SideMenuTab({
    super.key,
    this.emoji,
    this.title,
    required this.isSelected,
    this.onTap,
    this.onFocusChange,
    this.isCreateTab = false,
    required this.index,
    required this.tabsCount,
    this.onCreateTab,
  });

  @override
  State<SideMenuTab> createState() => _SideMenuTabState();
}

class _SideMenuTabState extends State<SideMenuTab> {
  bool _visible = false;
  bool _isEditing = false;
  String? _selectedEmoji;
  String? _lastText;
  final _controller = TextEditingController();
  final _focusNode = FocusNode();

  @override
  void initState() {
    super.initState();
    Future.delayed(Duration(milliseconds: 50 * widget.index), () {
      if (mounted) {
        setState(() => _visible = true);
      }
    });

    if (widget.isCreateTab) {
      _focusNode.addListener(() {
        widget.onFocusChange?.call(_focusNode.hasFocus);
        setState(() {});
      });

      // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
      _controller.addListener(() {
        final text = _controller.text;
        print('üîµ TextField: —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: "$text"');
        print('üîµ TextField: –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${text.length}');
        print('üîµ TextField: –¥–ª–∏–Ω–∞ –≤ —Ä—É–Ω–∞—Ö: ${text.runes.length}');
        print('üîµ TextField: —Ç–µ–∫—É—â–∞—è —ç–º–æ–¥–∑–∏: $_selectedEmoji');

        if (text.isEmpty) {
          // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏:
          // 1. –≠–º–æ–¥–∑–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          // 2. –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –±—ã–ª–æ –ø—É—Å—Ç—ã–º –¥–æ —ç—Ç–æ–≥–æ (–∑–Ω–∞—á–∏—Ç —ç—Ç–æ backspace)
          // 3. –ö—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–µ –ø–æ–ª—è
          if (_selectedEmoji != null &&
              _lastText?.isEmpty == true &&
              _controller.selection.baseOffset == 0) {
            print(
                'üîµ TextField: —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é');
            setState(() {
              _selectedEmoji = null;
              _isEditing = false;
            });

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ñ–æ–∫—É—Å–æ–º
            Future.delayed(const Duration(milliseconds: 50), () {
              if (mounted) {
                setState(() => _isEditing = true);
                _focusNode.requestFocus();
              }
            });
          }
        } else {
          if (_selectedEmoji == null) {
            final isEmojiResult = isEmoji(text);
            print('üîµ TextField: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏: $isEmojiResult');

            if (isEmojiResult) {
              print('üîµ TextField: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —ç–º–æ–¥–∑–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º: "$text"');
              final emoji = text;
              _controller.clear();
              setState(() {
                _selectedEmoji = emoji;
                print('üîµ TextField: —ç–º–æ–¥–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $_selectedEmoji');
              });
            }
          }
        }
        _lastText = text;
      });
    }
  }

  bool isEmoji(String text) {
    if (text.isEmpty) {
      print('üîµ isEmoji: —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π');
      return false;
    }

    final runes = text.runes.toList();
    print('üîµ isEmoji: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç: "$text"');
    print('üîµ isEmoji: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–Ω: ${runes.length}');
    print(
        'üîµ isEmoji: –∫–æ–¥—ã: ${runes.map((r) => '0x${r.toRadixString(16)}').join(", ")}');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —ç–º–æ–¥–∑–∏
    for (final rune in runes) {
      final isInRange =
          (rune >= 0x1F300 && rune <= 0x1F9FF) || // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏
              (rune >= 0x2600 && rune <= 0x26FF) || // –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
              (rune >= 0x2700 && rune <= 0x27BF) || // Dingbats
              (rune >= 0xFE00 && rune <= 0xFE0F); // –í–∞—Ä–∏–∞—Ü–∏–∏

      print(
          'üîµ isEmoji: —Ä—É–Ω–∞ 0x${rune.toRadixString(16)} ${isInRange ? '–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ' : '–Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ'}');

      if (!isInRange) {
        print('üîµ isEmoji: –Ω–µ —ç–º–æ–¥–∑–∏');
        return false;
      }
    }

    print('üîµ isEmoji: —ç—Ç–æ —ç–º–æ–¥–∑–∏');
    return true;
  }

  @override
  Widget build(BuildContext context) {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: -1.0, end: _visible ? 0.0 : -1.0),
      duration: const Duration(milliseconds: 200),
      curve: Curves.easeOutCubic,
      builder: (context, value, child) {
        return Transform.translate(
          offset: Offset(value * 100, 0),
          child: Opacity(
            opacity: value == -1 ? 0 : 1,
            child: child,
          ),
        );
      },
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 4),
        child: SmoothContainer(
          smoothness: 0.6,
          borderRadius: BorderRadius.circular(12),
          color:
              (widget.isCreateTab && _focusNode.hasFocus) || widget.isSelected
                  ? AppColors.getSecondaryBackground(context)
                  : AppColors.getPrimaryBackground(context),
          side: (widget.isCreateTab && _focusNode.hasFocus) || widget.isSelected
              ? BorderSide(
                  color: AppColors.getTertiaryBackground(context),
                  width: 1,
                )
              : BorderSide.none,
          child: Material(
            color: Colors.transparent,
            child: widget.isCreateTab
                ? _buildCreateTab(context)
                : _buildNormalTab(context),
          ),
        ),
      ),
    );
  }

  Widget _buildCreateTab(BuildContext context) {
    return _isEditing
        ? Padding(
            padding: const EdgeInsets.symmetric(
              horizontal: 20,
              vertical: 16,
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞
                if (_selectedEmoji != null) ...[
                  Text(
                    _selectedEmoji!,
                    style: TextStyle(
                      fontSize: 20,
                      fontFamily: GoogleFonts.inter().fontFamily,
                    ),
                  ),
                  const SizedBox(width: 12),
                ],
                Expanded(
                  child: TextField(
                    controller: _controller,
                    focusNode: _focusNode,
                    textCapitalization: TextCapitalization.sentences,
                    style: TextStyle(
                      color: AppColors.getPrimaryText(context),
                      fontSize: 17,
                      letterSpacing: 0.2,
                      fontFamily: GoogleFonts.inter().fontFamily,
                    ),
                    decoration: InputDecoration(
                      border: InputBorder.none,
                      isDense: true,
                      hintText: 'Make a Tab',
                      hintStyle: TextStyle(
                        color: AppColors.getSecondaryText(context),
                        fontSize: 17,
                        letterSpacing: 0.2,
                        fontFamily: GoogleFonts.inter().fontFamily,
                      ),
                    ),
                    onSubmitted: (value) {
                      if (value.isNotEmpty && _selectedEmoji != null) {
                        widget.onCreateTab?.call('$_selectedEmoji $value');
                        setState(() {
                          _isEditing = false;
                          _controller.clear();
                          _selectedEmoji = null;
                        });
                      }
                    },
                  ),
                ),
                if (_controller.text.isNotEmpty) ...[
                  const SizedBox(width: 16),
                  InkWell(
                    onTap: () {
                      if (_controller.text.isNotEmpty) {
                        widget.onFocusChange?.call(false);
                        setState(() {
                          _isEditing = false;
                          _controller.clear();
                        });
                      }
                    },
                    child: SizedBox(
                      width: 24,
                      height: 24,
                      child: SvgPicture.asset(
                        'assets/icons/tab_check.svg',
                        width: 24,
                        height: 24,
                        colorFilter: ColorFilter.mode(
                          AppColors.getSecondaryText(context),
                          BlendMode.srcIn,
                        ),
                      ),
                    ),
                  ),
                ],
              ],
            ),
          )
        : InkWell(
            onTap: () {
              setState(() => _isEditing = true);
              Future.delayed(const Duration(milliseconds: 50), () {
                _focusNode.requestFocus();
              });
            },
            child: Padding(
              padding: const EdgeInsets.symmetric(
                horizontal: 20,
                vertical: 16,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Container(
                    width: 24,
                    height: 24,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(6),
                    ),
                    child: const Center(
                      child: Icon(
                        Icons.add,
                        size: 18,
                        color: Colors.black,
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Text(
                    'Make a Tab',
                    style: TextStyle(
                      color: AppColors.getSecondaryText(context),
                      fontSize: 17,
                      letterSpacing: 0.2,
                      fontFamily: GoogleFonts.inter().fontFamily,
                    ),
                  ),
                ],
              ),
            ),
          );
  }

  Widget _buildNormalTab(BuildContext context) {
    return InkWell(
      onTap: () {
        print('üîµ SideMenuTab: onTap called');
        widget.onTap?.call();
      },
      child: Padding(
        padding: const EdgeInsets.symmetric(
          horizontal: 20,
          vertical: 16,
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            Text(
              widget.emoji ?? '',
              style: TextStyle(
                fontSize: 20,
                fontFamily: GoogleFonts.inter().fontFamily,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: AnimatedDefaultTextStyle(
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut,
                style: TextStyle(
                  color: AppColors.getPrimaryText(context),
                  fontSize: 17,
                  letterSpacing: 0.2,
                  fontWeight:
                      widget.isSelected ? FontWeight.w500 : FontWeight.normal,
                  fontFamily: GoogleFonts.inter().fontFamily,
                ),
                child: Text(widget.title ?? ''),
              ),
            ),
            if (widget.index == 1) ...[
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è Inbox
              const SizedBox(width: 16),
              SizedBox(
                // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ SizedBox —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                width: 24,
                height: 24,
                child: SvgPicture.asset(
                  'assets/icons/tab_pin.svg',
                  width: 24,
                  height: 24,
                  colorFilter: ColorFilter.mode(
                    AppColors.getSecondaryText(context),
                    BlendMode.srcIn,
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    _focusNode.dispose();
    super.dispose();
  }
}
